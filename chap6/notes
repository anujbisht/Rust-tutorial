------------------------------------> Enums and Pattern Matching <-------------------------------------
Enums allows us to define a type by enumerating its possible variants.Enums give you a way of saying a value is one of a possible set of values.

enum IpAddrKind {   <-- Possible kind of ip addresses defined as enum
	V4,         <-- Variant of enum
	V6,	    <-- Variant of enum
}

IpAddrKind -> custom datattype defined somewhere else in a code

Enum Value ---

let four = IpAddrKind::V4; 
let six  = IpAddrKind::V6;

both values IpAddrKind::V4 and IpAddrKind::V6 are of the same type: IpAddrKind

We can then define a function that takes any ipAddrKind:

fn route(ip_kind: IpAddrKind) {}

we can then call this function with either variant

route(IpAddrKind::v4);
route(IpAddrKind::v6);

------------------------> Options enum <---------------------
 Option, which is another enum defined by the standard library. The Option type encodes the very common scenario in which a value could be something or it could be nothing

Example --> if you request the first item in a non-empty list, you would get a value. If you request the first item in an empty list, you would get nothing. Expressing this concept in terms of the type system means the compiler can check whether you’ve handled all the cases you should be handling; this functionality can prevent bugs that are extremely common in other programming languages

Rust doesn’t have the null feature that many other languages have.Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.

enum Option<T> {
    None,
    Some(T),
}

The Option<T> enum is so useful that it’s even included in the prelude; you don’t need to bring it into scope explicitly. Its variants are also included in the prelude: you can use Some and None directly without the Option:: prefix. The Option<T> enum is still just a regular enum, and Some(T) and None are still variants of type Option<T>.

<T> means that the Some variant of the Option enum can hold one piece of data of any type, and that each concrete type that gets used in place of T makes the overall Option<T> type a different type

When we have a Some value, we know that a value is present and the value is held within the Some. When we have a None value, in some sense it means the same thing as null: we don’t have a valid value
Option<T> and T (where T can be any type) are different types, the compiler won’t let us use an Option<T> value as if it were definitely a valid value

you have to convert an Option<T> to a T before you can perform T operations with it. Generally, this helps catch one of the most common issues with null: assuming that something isn’t null when it actually is.

